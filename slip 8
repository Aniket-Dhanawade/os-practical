Q.1 Write a program to simulate Contiguous file allocation method. Assume disk 
with n number of blocks. Give value of n as input. Randomly mark some block 
as allocated and accordingly maintain the list of free blocks Write menu driver 
program with menu options as mentioned above and implement each option. 
• Show Bit Vector 
• Create New File 
• Show Directory 
• Exit 
Answer:
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MAX 200
typedef struct dir
{
 char fname[20];
 int start,length;
 struct dir*next;
}NODE;
NODE*first,*last;
int n,fb,bit[MAX];
void init()
{
 int i;
 printf("Enter total no of disk blocks:");
 scanf("%d",&n);
 fb=n;
 for(i=0;i<10;i++)
 {
 
 if(bit[i]!=1)
 {
 bit[i]=1;
 fb--;
 }
 }
}
void show_bitvector()
{
 int i;
 for(i=0;i<n;i++)
 printf("%d",bit[i]);
 printf("\n");
}
void show_dir()
{
 NODE *p;
 int i;
 printf("File\tstart\tlength\n");
 p=first;
 while(p!=NULL)
 {
 printf("%s\t%d\t%d\n",p->fname,p->start,p->length);
 
 p=p->next;
 
 }
}
void create()
{
 NODE *p;
 char fname[20];
 int i=0,j=0,nob,start;
 printf("Enter filename:");
 scanf("%s",fname);
 printf("Enter no of blocks:");
 scanf("%d",&nob);
 if(nob>n)
 {
 printf("failed to create file %s\n",fname);
 return;
 }
 for(i=0;i<n;i++)
 {
 if(bit[i]==0)
 break;
 }
 p=(NODE*)malloc(sizeof(NODE));
 strcpy(p->fname,fname);
 p->start=i;
 p->length=nob;
 p->next=NULL;
 if(first==NULL)
 first=p;
 else
 last->next=p;
 last=p;
 fb=nob;
 j=i+1;
 nob--;
 while(nob>0)
 {
 if(bit[j]==0)
 {
 bit[i]=j;
 i=j;
 nob--;
 }
 j++;
 }
 bit[i]=-1;
 printf("File %s created successfully\n",fname);
}
void delete()
{
 char fname[20];
 NODE *p,*q;
 int nob=0,i,j;
 printf("Enter name to be deleted:");
 scanf("%s",fname);
 p=q=first;
 while(p!=NULL)
 {
 if(strcmp(p->fname,fname)==0)
 break;
 q=p;
 p=p->next;
 }
 if(p==NULL)
 {
 printf("File %s not found\n",fname);
 return;
 }
 i=p->start;
 while(i!=-1)
 {
 nob++;
 j=i;
 i=bit[i];
 bit[j]=0;
 }
 fb+=nob;
 if(p==first)
 first=first->next;
 else if(p==last)
 {
 last=q;
 last->next=NULL;
 }
 else
 {
 q->next=p->next;
 }
 free(p);
 printf("File %s deleted successfully\n",fname);
}
int main()
{
 int ch;
 init();
 while(1)
 {
 printf("1.show bit vector\n");
 printf("2.create new file\n");
 printf("3.show directory\n");
 printf("4.delete file\n");
 printf("5.exit\n");
 printf("Enter your choice(1-5):\n");
 scanf("%d",&ch);
 
 switch(ch)
 {
 case 1:show_bitvector();
 break;
 case 2:create();
 break;
 case 3:show_dir();
 break;
 case 4:delete();
 break;
 case 5:exit(0);
 
 }
 }
 return 0;
}


Q.2 Write a simulation program for disk scheduling using SSTF algorithm. Accept 
total number of disk blocks, disk request string, and current head position from the 
user. Display the list of request in the order in which it is served. Also display the 
total number of head moments. 
 186, 89, 44, 70, 102, 22, 51, 124 
 Start Head Position: 70
Answer:
#include<stdio.h>
#include<stdlib.h>
int main()
{
 int RQ[25],i,n,TotalHeadMov=0,initial,count=0;
 printf("ENter the number of request:\n");
 scanf("%d",&n);
 printf("Enter the sequence of request:\n");
 for(i=0;i<n;i++)
 {
 scanf("%d",&RQ[i]);
 }
 printf("Enter initial head position:\n");
 scanf("%d",&initial);
 printf("\n\nSequence of request:\n");
 while(count!=n)
 {
 int min=1000,diff,index;
 for(i=0;i<n;i++)
 {
 diff=abs(RQ[i]-initial);
 if(min>=diff)
 {
 min=diff;
 index=i;
 }
 }
 
 TotalHeadMov=TotalHeadMov+min;
 initial=RQ[index];
 printf("%d\n",RQ[index]);
 RQ[index]=1000;
 count++;
 }
 printf("Total Head Moment=%d",TotalHeadMov);
}
